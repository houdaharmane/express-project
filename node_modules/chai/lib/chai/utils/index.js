/*!
 * chai
 * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

<<<<<<< HEAD
// Dependencies that are used for multiple exports are required here only once
import * as checkError from 'check-error';

// test utility
export {test} from './test.js';

// type utility
import {type} from './type-detect.js';
export {type};

// expectTypes utility
export {expectTypes} from './expectTypes.js';

// message utility
export {getMessage} from './getMessage.js';

// actual utility
export {getActual} from './getActual.js';

// Inspect util
export {inspect} from './inspect.js';

// Object Display util
export {objDisplay} from './objDisplay.js';

// Flag utility
export {flag} from './flag.js';

// Flag transferring utility
export {transferFlags} from './transferFlags.js';

// Deep equal utility
export {default as eql} from 'deep-eql';

// Deep path info
export {getPathInfo, hasProperty} from 'pathval';

/**
 * Function name
 *
 * @param {Function} fn
 * @returns {string}
 */
export function getName(fn) {
  return fn.name;
}

// add Property
export {addProperty} from './addProperty.js';

// add Method
export {addMethod} from './addMethod.js';

// overwrite Property
export {overwriteProperty} from './overwriteProperty.js';

// overwrite Method
export {overwriteMethod} from './overwriteMethod.js';

// Add a chainable method
export {addChainableMethod} from './addChainableMethod.js';

// Overwrite chainable method
export {overwriteChainableMethod} from './overwriteChainableMethod.js';

// Compare by inspect method
export {compareByInspect} from './compareByInspect.js';

// Get own enumerable property symbols method
export {getOwnEnumerablePropertySymbols} from './getOwnEnumerablePropertySymbols.js';

// Get own enumerable properties method
export {getOwnEnumerableProperties} from './getOwnEnumerableProperties.js';

// Checks error against a given set of criteria
export {checkError};

// Proxify util
export {proxify} from './proxify.js';

// addLengthGuard util
export {addLengthGuard} from './addLengthGuard.js';

// isProxyEnabled helper
export {isProxyEnabled} from './isProxyEnabled.js';

// isNaN method
export {isNaN} from './isNaN.js';

// getOperator method
export {getOperator} from './getOperator.js';

/**
 * Determines if an object is a `RegExp`
 * This is used since `instanceof` will not work in virtual contexts
 *
 * @param {*} obj Object to test
 * @returns {boolean}
 */
export function isRegExp(obj) {
  return Object.prototype.toString.call(obj) === '[object RegExp]';
}

/**
 * Determines if an object is numeric or not
 *
 * @param {unknown} obj Object to test
 * @returns {boolean}
 */
export function isNumeric(obj) {
  return ['Number', 'BigInt'].includes(type(obj));
}
=======
/*!
 * Dependencies that are used for multiple exports are required here only once
 */

var pathval = require('pathval');

/*!
 * test utility
 */

exports.test = require('./test');

/*!
 * type utility
 */

exports.type = require('type-detect');

/*!
 * expectTypes utility
 */
exports.expectTypes = require('./expectTypes');

/*!
 * message utility
 */

exports.getMessage = require('./getMessage');

/*!
 * actual utility
 */

exports.getActual = require('./getActual');

/*!
 * Inspect util
 */

exports.inspect = require('./inspect');

/*!
 * Object Display util
 */

exports.objDisplay = require('./objDisplay');

/*!
 * Flag utility
 */

exports.flag = require('./flag');

/*!
 * Flag transferring utility
 */

exports.transferFlags = require('./transferFlags');

/*!
 * Deep equal utility
 */

exports.eql = require('deep-eql');

/*!
 * Deep path info
 */

exports.getPathInfo = pathval.getPathInfo;

/*!
 * Check if a property exists
 */

exports.hasProperty = pathval.hasProperty;

/*!
 * Function name
 */

exports.getName = require('get-func-name');

/*!
 * add Property
 */

exports.addProperty = require('./addProperty');

/*!
 * add Method
 */

exports.addMethod = require('./addMethod');

/*!
 * overwrite Property
 */

exports.overwriteProperty = require('./overwriteProperty');

/*!
 * overwrite Method
 */

exports.overwriteMethod = require('./overwriteMethod');

/*!
 * Add a chainable method
 */

exports.addChainableMethod = require('./addChainableMethod');

/*!
 * Overwrite chainable method
 */

exports.overwriteChainableMethod = require('./overwriteChainableMethod');

/*!
 * Compare by inspect method
 */

exports.compareByInspect = require('./compareByInspect');

/*!
 * Get own enumerable property symbols method
 */

exports.getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');

/*!
 * Get own enumerable properties method
 */

exports.getOwnEnumerableProperties = require('./getOwnEnumerableProperties');

/*!
 * Checks error against a given set of criteria
 */

exports.checkError = require('check-error');

/*!
 * Proxify util
 */

exports.proxify = require('./proxify');

/*!
 * addLengthGuard util
 */

exports.addLengthGuard = require('./addLengthGuard');

/*!
 * isProxyEnabled helper
 */

exports.isProxyEnabled = require('./isProxyEnabled');

/*!
 * isNaN method
 */

exports.isNaN = require('./isNaN');

/*!
 * getOperator method
 */

exports.getOperator = require('./getOperator');
>>>>>>> 5feea03a860e1851f4a7432dfd45499e26af9716
