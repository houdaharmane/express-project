/* eslint-disable no-underscore-dangle */

<<<<<<< HEAD
import { Transform } from 'node:stream';

// This is a buffering parser, have a look at StreamingQuerystring.js for a streaming parser
=======
'use strict';

const { Transform } = require('stream');
const querystring = require('querystring');

// This is a buffering parser, not quite as nice as the multipart one.
// If I find time I'll rewrite this to be fully streaming as well
>>>>>>> 5feea03a860e1851f4a7432dfd45499e26af9716
class QuerystringParser extends Transform {
  constructor(options = {}) {
    super({ readableObjectMode: true });
    this.globalOptions = { ...options };
    this.buffer = '';
    this.bufferLength = 0;
  }

  _transform(buffer, encoding, callback) {
    this.buffer += buffer.toString('ascii');
    this.bufferLength = this.buffer.length;
    callback();
  }

  _flush(callback) {
<<<<<<< HEAD
    const fields = new URLSearchParams(this.buffer);
    for (const [key, value] of fields) {
      this.push({
        key,
        value,
=======
    const fields = querystring.parse(this.buffer, '&', '=');
    // eslint-disable-next-line no-restricted-syntax, guard-for-in
    for (const key in fields) {
      this.push({
        key,
        value: fields[key],
>>>>>>> 5feea03a860e1851f4a7432dfd45499e26af9716
      });
    }
    this.buffer = '';
    callback();
  }
}

<<<<<<< HEAD
export default QuerystringParser;
=======
module.exports = QuerystringParser;
>>>>>>> 5feea03a860e1851f4a7432dfd45499e26af9716
